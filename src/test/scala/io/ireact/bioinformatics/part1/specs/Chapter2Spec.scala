/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 www.iReact.io
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package io.ireact.bioinformatics.part1.specs

import io.ireact.bioinformatics.part1.Chapter2._
import io.ireact.bioinformatics.part1.support.{ Peptide, Spectrum }
import org.scalatest.{ FeatureSpec, Matchers }

import scala.io.Source

class Chapter2Spec extends FeatureSpec with Matchers {
  val tyrocidineB1 = "VKLFPWFNQY"

  feature("peptideFor") {
    scenario("example") {
      val pattern = "CCUCGUACUGAUAUUAAU"
      peptideFor(pattern) shouldBe "PRTDIN"
    }
    scenario("interactive quiz") {
      val pattern = "AUGAAGACAUCGUUGGGGACUCUCGUUUGGGGCGUAAGGAUAAGCCAACGUCUUAUGUCAAUCAGAUACGUUAUCGAGCACCUAGCCAAACGGAAGACCCUGGUGACACGAUUGUUAUCGCUAGAUCAGCUUAACGACGAGGAAGCUACGCGCUUGGAGGGUACACAGACCAACCCAGGGACAGACCUAACUAGAACUAUUCGCUUUGGAAAACGCUAUAACUCUGCGUCGGCACAUCAAGCGCUGGCCGAAACCUAUUGCAUAACUCACGGACUCCUCGCUCCUAUACAGCUUGCUACCGUGAGACACGGCACAGACCUUAUUCUGGGUGGUCGCAACUGUAGAGCGAGAGGACGCCGCAGAGCCCCCUGUCAAGGGGAGCAAAGCGUGUCGGAAUUGAAUCCUAAACGGGGGCCUAGAGCGUCAAGAGGGAAAGCCUACGCAUCGCCGCAUCACCUACCAUUCUUGACAAGUUCGCCUUUAAUCCGUAAGCCUCCUCGUACAUAUUGCACACCGGUAACUGAUUUGAACUACAUCCGACCCGGAUGUUCGGGACAACUAUACAAGCGGUUGAGUUACCUAGGUAGCGUACUAGGCUCACUCAGUAAGAGCCGGCCACGGCCGAGUAUUCGCAUACUUGUUCUCUCCCUCCAUCUCAGUAUCUGCAUGCCGCGCGAUGCGACGGGGCGGUAUAAUCACACUGGGGGGAGGCCGUCACCUCUGUGCACGUUAGCUCGCAAUCGGCCUGCGGCGUAUCGAAUUGGUCGCGCGGCAGUCUUUUCGCCGGUGCCCUCACGUCGUUUCACCGGCCUAACAUCUUACUUCAGCCACAUAUUGGAGGGGAUGUUUCUCCCGAAUGCCCACCCUUGUAGUAAUAACUGGGUUGGACCGAAACGGACCUCGUGGUUCGACGUAUACUUUGCGGCUAUGAGUAUUCAACGUGGAAUCAGCGCCUCAUCUCUGCUUUUCGUGCAUCAGCGAAGCGCUGGUGUCGCUUGGAGGAAUCAUUAUGCAAGAGGAGGCACGAUUACAAAUGCUGAAGAUCAUAGAUCUCCUGGUCACCUAACGUCCUGGAGAAUCGUACAGUUUGUCCACCUGUGCAAGCAAGCGGGGAGACCUUCCUUCCAUCCAGCUGAGCGACACGGCAUCAAGCGCAAUAGAAGCAACGUGACGCGCGUUACCUCGACCAUCCCCAGUUUUAGUAACUUUGUCUGGUGCGGUAUAACCGUAGAGAAUGGAUCUAGCCUUGUAUCUGCAAUAGUAUCGCGAACGAUGCCACUCAGCGUUAGCGCCCUAGGGCCUAGCUCAACCGGAAGCUACCUACUUACAACAGUCAUUGUCUACUCUGGCAAGGCGGAUGUGGAGGGAAGAUUAUACGACGUGUCAAAUGUUUAUAAGAAACACGUCGUUGUGACCUUAGCCUCCGUUUUACAUGUAUUCCUCAUUUUGCAGAUUUUCCACUUCGCUAUACUGAGACUCGUGCAAGACAGGAAUUACCCCCCGUUCCGAUUUACAACUCGAAUAAAUGAUCCUAAUACGACGUUAGCGAUAUCGAGAUGUGUUAGAGCAGGGACAUCGCAUGGCAUCGGUAGCCAAAAGUUCGGUACUCAACGUCUUAAUACGUUCCUAGAAGGCUGUGAAAGUACCUACACCCACACUGACAUUGGUCACUCGGGCAGGGGUUUUGGAAAGGAGGUACAAAUGGAUGCACAGAGCGCUUCUCGACCCUUGCUUCCAAGGCCCACGUACGGUGCGGGUGCUUCAGUGAUAGCAGACUAUUCACCAGUCAACUCUGUGGUCCUUAAGUAUGGUACUGGAGAGCCUGGCAUGCUACGUCAACCGAUUCAGCUGCACGCCACUGCAUACGCUGACGCACAUAGAGCCUCUAUUACAAGUGUGAUGAACACAUAUUGCUGUAGCUUUAUGAUAUCCUUAAAAUGGUCUCUUGACUGUCGCGAUUUAAUACGCAUCGUGUUGUCCUUUCGGAAGAUCGUUCUCUGGUCCCGACUCUCGGCAGUCCUAGAGUUUGGAAGCAAGUUACGUGAGCCAUUGAUGCGUAGAUUACAAGGCCCGGCGCCUUUUUUCGGACAUUACUCGUAUGUCAGGGGAUAUUGCUACGAGCCAGACCACCAGAAAUCAAUUAUCUUCUUCCGUAACUACAUGGAUUCCCGGAAUAGGUUUGAGAACACAGCACGUCCACGUGCGUGGCAUGUUGGAGGGUCGCAUGUCGCCGUCGAGCCGUCAUUUGCUGUAUGUAAAGUGACACCACAGUGGUUCGUACGCCCCUAUCUGGCGGCGAAAUCUACAUUCAAGCAGACAACGUACUACGGGCGCGGGCAUUUUCCGUCAAGUCUAAACUUUCACCCAUUUUCUAACUUACCUCGGAGCAACGCGCCAGGGGUGGUCCCCAUAACUCCCGACGCGCGGGCGCCGGUCCUUGGGUUUCCUCCAUGCCGGCGGUCAAACCCAAGGCGUACUCGACUCUUGUGGGUGAUGGAGCUCGGUAAAUUCUUUACUCAUCUGAGCUUUCUUUAUGAACGAACCUGUUUAGCGUAUCGUCCCUACUUGUUUUGGGCUUUUAGAGUCAUACUCGUAGUACACAACAUUUCUUAUAGCUUGUCCGGGGGGAUCUUCAGUGUUGCCAAGCCGUGGUUCUACGUAGACCCAUAUAUUCAUCUGGCGACCCAGAUGUUCUCAACGGAUGGAUCGGCCCUCUAUUUGGAUCGCCUGUUGACCUUUGGGAAGCUACGAGGUCGUUAUCAGCGCUACGUCGUUAUCAGCACGUGGGUACGGAAAAUAAUUGUUGUAGUCCUGCAAUACAGGUGCGUGUUAUUCCCCGGAGCAGAGAACCAUGGGAACGAUCAGCCUGUAGCUCCUCUGAGAGGUAGCCGCCAGAGGGAAAUUUGGCGGGAAGCAAGCUCACAAUUGGUGGGCGUUAGCCGGAAGCAUACACCCAACUGUGGAGUAUCACAGUUAGCGACGUUAAGUGAAAACGUGGAAGAUCUACAUUGCUGGGUACCUGCGGAGCCGCUAACCGUGCCGGUAGGCCCCAUACGUCAAGCUACUCGGAUCAUAAACCAUAGAAAUACGCAGAUCCGAGUCCAACAAAUACGCUCCCCAAAGUACUCGUAUAUUGGGCAACUUUCGUGUCUCAUGCGUAUGUGUGAGCCAGAUGUUACGGGUCCUUUCAUACCACUAAAUGAGCUAAAAUUCAUUGAUCCGCCAGGAUUCCGUAAAACUCUUAAACCUGUAACCUUCGCAAUAGGGAGGGGCUUAGAGUUCCGCGGCUCCAUGUACCUCGCGGUCGUCCCGCGUCAACAAAUCAUUCUCAGUGCAAAUGCCGGAGGAGGGACAGCUAACCCCAGAGAUGAGCUAAUCUCUGUCGAGGUCUCUCGCCGCUCGCACAUAUCGUGCCUAAGUACGGUACAUUUGGUGGGAACCAUAUACCCGUCUUGCAGCCCGCGCAUAGCAUUGACAUACGUCCAGCCAGUUCGGCGGUGUAGAUAUGGGAGGGGGGUUUUUGUAUGUACGCGCGAAAAAUGGCCCUGGGUCAGCGUUCCGGAUUUAAAGAACUCGAAUCCCACACAACGCGCGCGAACCGCCCUUCAUGAAGACUACAGUUUAGCGUCACGCUCGUACAAUAUGGAGCGGACGUUAGUUACUGGUCUAUCCGACUACUCGGCGUCAAAUGACCGGGGCGCCGGCACCCGCCGUACCUUUGUAAGUGACAUCCUUCUAACUAGUUACGUGAACUCACUCUUUCCUAUAUUUGGCACGCCGUUCGAUUAUCAUUCGCCCAAGUGUACAAGGGUGGGUCAUCAUGGAAGUAUUAUGAACAAUUUUGAGUCGUUUGUGCCAUCGUCGCUCAUGCCUAGAAAUUCAAUAGAAAGAAGAGUAUACGGAAGCUGCUGCACUCCCGACGCCCAUCCGAACUGCGACCAUGGCACAAUGGCUAUACUCGCAGUCAUACCAAGCAUAGCAGUAGUGCCGGGCGGACCCUCUUCCAAUACCAAAAGUAUGGGGCGGACAGCGCGACCGAUCCUUACGAGGCUAAAAGCCGCGCGGCAUUCUGAGGAGUUCGUCUCGCUGCCCUUACCCCUGACGGACAGGAAACACGCAGAAUCGCACAGGGCUGCAUUUCUUUGUUCAGUAUCCUCUGGUUGGGCUUGGAGUUCGAUCCUCUGGUUGCAUCAAGGAUGCCGUAACGCUGUGCAUGCUAAGAUUACGCUCGAUCGAGGGUCCCUGCAUUACUCGCUGACAGUGUCGACCAUAAUGUUUUAUAUUCCUAAGCUUGAGUCUAGACUCUCUAGGAAAUGGCCACCAAUCUGUAAGCCGUUGUGGUUAGGCCGGUCACUCCUACCGAUCGGAGCGCCACCCACUAGCGAUAGCCCCUGCUUCGCCUCCCAUCGCGCAGACCGGAGUGCGUACUUCCCCCAUGGUCACCGGGGUUCCAUCCGACGGGUGGCUAAAACUGAACGGCUACACAGAUGCAUACAACGUGGCGGUAAGGCAUCGCUGGGCAACUUGUUAGGUGAGUCUUCUGAUAGGGAAGCUACAACGGUGGUCACCGCUGUAAUUGCUCCACGUGUCUCUCUGAAGCGAGCCUCCAGUUUUAAACAUAGCGUGACAGUUCCGUGGCGAAGAUGUUUUUGUUUGAGUACCGAGUACAGUUGUCUGCCAACGCGCAGUAUUUAUACCCGCCUGUACUGUCAUCCCGACACGGGUAUUAUUGUCGGUAGUCGAUCCGAGUACGAACUGUAUUGCUGCCGCAUCGUAAGUUUGGUGUGUACGCCAAACGAGUACAUGAAGGGCAGGGAGAGUGCCCGCAUGGCGGGUUGGGUCUGGGGACGCCGCCGCACACUUCUUACACGAGUAUGUCAUGGCUCGAUAUUCUUUGGGCAUGGGUUCACACUACAGCAUAUAGUUGUAGCGACUAGUUGGCUAGAGCGGUAUCCCCAAUAUGUUAUUCAUGGGGACCGGCCUCUACUCAACGCUGCACCACGUUGUGCAGCUUAUAAUGAUUACUCUGAGUCUCGCAGCAUGCGGUCUCGCUUAUUGCGGCCCCUAAAAAAUAUGAUUCCGGCCACCCUACUGAUAUCGCUAAUUUUGGUAUGCAUUCUGUCAAUCAAUUCUCUUACACGAUGCUACUGCCGGUCUCUUGGCGUCGGACGUAGGAAUCGUGCCCAUAAAAGCACCAUCCAGGUACAGGUAACCGCACUAGUGGAUUGUCUCGUUUACUGGGUUCCACAGAUAUACGUCCAAGCUAGUCAGGUUACGCAAUCUGAGUUCAAAGCUAGCGACGUGUUGCAUGGCACCGGCACCGGAACUGUCGUGUUGGCUGAUAACGCUACGAUACGUUGCACACUCUUUCCGGACUGUUCAGCACACCCCACGUCCUCCCGAAAUAAUACCCGCCAAUCGCUUCCCACGGUUAGGUGUGAUGUUAAGAUACUAGUGGCAAUCGGACCUGCAACGUUGGCAUGUGUUCUGGCAGUCCAUGAUGGCCUGUUCACCGUUGGGCGCCCCACACCGCGCAACUUACCCGGAAUAGAAGCUGGGCUUUUCUGGCGAGGUACGCUCGUUAUAAUAUUUCCCUCACGCCACUGUACUAAACGCCUCCCCUCUUCGUCUCGCGAUACCAAAGUCGAGUGGCGUGCCGAGCAGAAUGGCUGUUUACGGAGCACCCGCCGAGACCCAUCUCUGUCACUUGUUGGCGUCAUAGGCGCGGCAACCUGGCAGUUACGGUCAGCGAUGACGCACUUCCACAUCCGCCCCCCUAUUAAACACUGGCCGGUUAGUAGACGAUUCGGACGCACUCUUUUUCCUUCCGGUUACAUUGGGGACGAAGAAUACUGGAAAGUCGUGCUAUUUAUUCAACUUAAAAAGACACCGACGAACUGCACUGAGCUGGGAUUUAAAUCAGAUGGAAGCCGCUGGUUUGCGCCAUCGAGCAUUGACAAUGCGAUUGCGUUAGAAGUCUUGAUCUGCCAUGUCAACGUCUCUGUCACCAACCUACCUCCAGAGCUUAGAUCUGCAAACGUUGCGUUAAUCUGUGCGCUCUGGGGAGAACUGUAUACCCUGUGUUUCAUUUGGCACAGGACGCCAAUCCGGGGACUUAUUCUUAGCUAUUUCCCGGACUGGAAGCUCCGGGGUCCGCACUGUCCUAAAUCUACGCCCCUUUGGGCUGAGCGAAGGUCGAACGCCUCUCUCACGCUCAACAGCUCCGAUCAACGCUCGGGACGUAAAUCGAUACCUCUGUUCGGACAGUAUAAAACCCUACAUGAUGGGCACGUGUCAACUAUACUCAGAACCCUAUCCAAGAAUUAUAGCACCGCAGUGAGACAGAAACACUCCUCGUUUAGGUACUAUGAGCUUGGGCCCUUUAUUUACUGCUACCAGACAAGCGCAUUGUGUGUGACACCAACGCGUCUUAAUGAGUGGAUCGUCACCGGCACGGAACCGCUGACCCGCCUUCGUUCACAUCCCAAAUGUACAAGUCUGCAUUGGUUGGCUUCGACUUCUCUCGGUUUUAUCUUCUCCGCACUAGCGAAUCCGCCAAGGAGGCCCGUUGAGUCUGGAGAUAGGGGACUGUUGACGGGUCAAGGCAAAGUUUUGGGAUUGCCCCAGGAAACAGGUCCUGAGAAAUUCUUAUUGGGUCGACUUAAUAUCAACAACAAGUCUAACAAAUUAAUAAUCUAUAACUUACUAGAUACGCCUUGUUGGCGGAUCGGGUCAAGCAUCGUGACCUUUUCGAGCACGAUUCAGGUUAUUCUCUGGAAAGCCAAUGGCCCGUGCAUUUACGUCAGGCUUAUGGCUCUUCACGCUGACGCCUAUUGCAACGGAUUAAACCUCCAAGUGAUCGCUAAAACCCAUUAUUCAUGCGUUGCCUUUCCACAUUUUUGCAUAGUGUUAUUUAGAGCUCAAGGUACGUUUGAGCAUACCGACUGUUUUCCGAUUGCUUGCUUAAUCGAUGAAACAGCGCGGGCUUUGCUAGGAAUAGGGAGGCACCGAAUCUUUAUGCUGCGGCUCGCCGUUUUGUCCCAUUCCGAUAAUCGUAGUUCGCUACUACUGGUUCGAAUGUUGAAACUUCAUCUGUGGGCCGUGACGCUCGAGAAGGCGGAUCCUACAAGUCACUGCGGAAGUCCGACGACUCAGGAUGAGGAUCACUGCAUUGCUCUAUAUGGUUGUUUGGUCGCACAUUCUACUACAGUAAAGGCACAAUUAAGCUUCGAUGCGAACGCAGAGUCCAUUCUAUACGGAACCAGUCAGAUUAACCAGUUGGUUCAAGGGCCCUUUUAUCAAUCGAGCGGGCCAACCUUACUAGAUCUUUUCUGUAGUAUUCCUGACUUGGAUCUUGUCUAUGGACAGGGGCACGGCUCGCUGGAAACUUGGAGAACCGAAAUACGAGAAGCUGAUGAUAUACGAGUGGGGCAAACGCACCAACCUCAUUGUAAGGGUGGGACUCAGGACGAUAGAGUACAAAUGCUAGUCAACACCCCAUCUCAUCCUAACUUCUGGGUGGUCAUUUCUAAGGUUACGAAGGUCAAGAAACCCUUUAAAUCAUGUAGCUCACUGCUGCGGUCCCUAGCGCCACAAGAGUCUCGGAUGUUCUCGAUCUUCGUGCACUUCAACCAGCGUUUUGGCUCCGCACACAUACGAUGCGGAACAGGAACCACAAGUCGCCGUGGCCCUUACAGCUUGCCGGGACAGCUACGCGAUGUGCCCACACGGGGAAGGAACGCUUUAACUAUUCCGUACUGUAACCUUGCGCUUAGGCAAAUCACUCUCGUCACUAGACGCUACGAUGCUGGCUCUAAAUAUGACUGCAAGGCACCGGAUCCCAACCAAGCACCCGUGCUUCUGUUUGAGUUAGCGCAAAUUCCAGGCGCGCGCAGAGCUUUGGUCACGGGCAUACUCUUUUAUGCGGCGUACCAGGUAUCAUUAGGAUGGAACAAAUCUUCAGAAGUUGCCGGGGAGCGUCUAUCCGCCAAGUUCUCCCUGCAACAUCUCGCGAACUUCACGCGAAACUGCGUGAUGCAUAGCGACGAUCCCAAAACGUCUUUGCUCUUACUAAUGCGUGAGGAAGUGCUCUAG"
      peptideFor(pattern) shouldBe "MKTSLGTLVWGVRISQRLMSIRYVIEHLAKRKTLVTRLLSLDQLNDEEATRLEGTQTNPGTDLTRTIRFGKRYNSASAHQALAETYCITHGLLAPIQLATVRHGTDLILGGRNCRARGRRRAPCQGEQSVSELNPKRGPRASRGKAYASPHHLPFLTSSPLIRKPPRTYCTPVTDLNYIRPGCSGQLYKRLSYLGSVLGSLSKSRPRPSIRILVLSLHLSICMPRDATGRYNHTGGRPSPLCTLARNRPAAYRIGRAAVFSPVPSRRFTGLTSYFSHILEGMFLPNAHPCSNNWVGPKRTSWFDVYFAAMSIQRGISASSLLFVHQRSAGVAWRNHYARGGTITNAEDHRSPGHLTSWRIVQFVHLCKQAGRPSFHPAERHGIKRNRSNVTRVTSTIPSFSNFVWCGITVENGSSLVSAIVSRTMPLSVSALGPSSTGSYLLTTVIVYSGKADVEGRLYDVSNVYKKHVVVTLASVLHVFLILQIFHFAILRLVQDRNYPPFRFTTRINDPNTTLAISRCVRAGTSHGIGSQKFGTQRLNTFLEGCESTYTHTDIGHSGRGFGKEVQMDAQSASRPLLPRPTYGAGASVIADYSPVNSVVLKYGTGEPGMLRQPIQLHATAYADAHRASITSVMNTYCCSFMISLKWSLDCRDLIRIVLSFRKIVLWSRLSAVLEFGSKLREPLMRRLQGPAPFFGHYSYVRGYCYEPDHQKSIIFFRNYMDSRNRFENTARPRAWHVGGSHVAVEPSFAVCKVTPQWFVRPYLAAKSTFKQTTYYGRGHFPSSLNFHPFSNLPRSNAPGVVPITPDARAPVLGFPPCRRSNPRRTRLLWVMELGKFFTHLSFLYERTCLAYRPYLFWAFRVILVVHNISYSLSGGIFSVAKPWFYVDPYIHLATQMFSTDGSALYLDRLLTFGKLRGRYQRYVVISTWVRKIIVVVLQYRCVLFPGAENHGNDQPVAPLRGSRQREIWREASSQLVGVSRKHTPNCGVSQLATLSENVEDLHCWVPAEPLTVPVGPIRQATRIINHRNTQIRVQQIRSPKYSYIGQLSCLMRMCEPDVTGPFIPLNELKFIDPPGFRKTLKPVTFAIGRGLEFRGSMYLAVVPRQQIILSANAGGGTANPRDELISVEVSRRSHISCLSTVHLVGTIYPSCSPRIALTYVQPVRRCRYGRGVFVCTREKWPWVSVPDLKNSNPTQRARTALHEDYSLASRSYNMERTLVTGLSDYSASNDRGAGTRRTFVSDILLTSYVNSLFPIFGTPFDYHSPKCTRVGHHGSIMNNFESFVPSSLMPRNSIERRVYGSCCTPDAHPNCDHGTMAILAVIPSIAVVPGGPSSNTKSMGRTARPILTRLKAARHSEEFVSLPLPLTDRKHAESHRAAFLCSVSSGWAWSSILWLHQGCRNAVHAKITLDRGSLHYSLTVSTIMFYIPKLESRLSRKWPPICKPLWLGRSLLPIGAPPTSDSPCFASHRADRSAYFPHGHRGSIRRVAKTERLHRCIQRGGKASLGNLLGESSDREATTVVTAVIAPRVSLKRASSFKHSVTVPWRRCFCLSTEYSCLPTRSIYTRLYCHPDTGIIVGSRSEYELYCCRIVSLVCTPNEYMKGRESARMAGWVWGRRRTLLTRVCHGSIFFGHGFTLQHIVVATSWLERYPQYVIHGDRPLLNAAPRCAAYNDYSESRSMRSRLLRPLKNMIPATLLISLILVCILSINSLTRCYCRSLGVGRRNRAHKSTIQVQVTALVDCLVYWVPQIYVQASQVTQSEFKASDVLHGTGTGTVVLADNATIRCTLFPDCSAHPTSSRNNTRQSLPTVRCDVKILVAIGPATLACVLAVHDGLFTVGRPTPRNLPGIEAGLFWRGTLVIIFPSRHCTKRLPSSSRDTKVEWRAEQNGCLRSTRRDPSLSLVGVIGAATWQLRSAMTHFHIRPPIKHWPVSRRFGRTLFPSGYIGDEEYWKVVLFIQLKKTPTNCTELGFKSDGSRWFAPSSIDNAIALEVLICHVNVSVTNLPPELRSANVALICALWGELYTLCFIWHRTPIRGLILSYFPDWKLRGPHCPKSTPLWAERRSNASLTLNSSDQRSGRKSIPLFGQYKTLHDGHVSTILRTLSKNYSTAVRQKHSSFRYYELGPFIYCYQTSALCVTPTRLNEWIVTGTEPLTRLRSHPKCTSLHWLASTSLGFIFSALANPPRRPVESGDRGLLTGQGKVLGLPQETGPEKFLLGRLNINNKSNKLIIYNLLDTPCWRIGSSIVTFSSTIQVILWKANGPCIYVRLMALHADAYCNGLNLQVIAKTHYSCVAFPHFCIVLFRAQGTFEHTDCFPIACLIDETARALLGIGRHRIFMLRLAVLSHSDNRSSLLLVRMLKLHLWAVTLEKADPTSHCGSPTTQDEDHCIALYGCLVAHSTTVKAQLSFDANAESILYGTSQINQLVQGPFYQSSGPTLLDLFCSIPDLDLVYGQGHGSLETWRTEIREADDIRVGQTHQPHCKGGTQDDRVQMLVNTPSHPNFWVVISKVTKVKKPFKSCSSLLRSLAPQESRMFSIFVHFNQRFGSAHIRCGTGTTSRRGPYSLPGQLRDVPTRGRNALTIPYCNLALRQITLVTRRYDAGSKYDCKAPDPNQAPVLLFELAQIPGARRALVTGILFYAAYQVSLGWNKSSEVAGERLSAKFSLQHLANFTRNCVMHSDDPKTSLLLLMREEVL"
    }
  }

  feature("countPossiblePatternsTranslatingToPeptide") {
    scenario("example") {
      val peptide = "SYNGE"
      countPossiblePatternsTranslatingToPeptide(peptide) shouldBe 192
    }
    scenario("tyrocidineB1") {
      val peptide = tyrocidineB1
      countPossiblePatternsTranslatingToPeptide(peptide) shouldBe 6144
    }
  }

  feature("dnaEncodesPeptide") {
    scenario("example") {
      val dnaPattern = "ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA"
      val peptide = "MA"
      dnaEncodesPeptide(dnaPattern, peptide) shouldBe Seq("ATGGCC", "GGCCAT", "ATGGCC")
    }
    scenario("tyrocidineB1 in BacillusBrevis") {
      val dnaPattern = Source.fromFile("src/main/resources/BacillusBrevis.txt").getLines().mkString
      val peptide = tyrocidineB1
      dnaEncodesPeptide(dnaPattern, peptide) shouldBe Seq.empty[String]
    }
  }

  feature("massOf") {
    scenario("tyrocidineB1") {
      massOf(tyrocidineB1) shouldBe 1322
    }
  }

  feature("theoreticalSpectrum") {
    scenario("tyrocidineB1") {
      theoreticalSpectrum(tyrocidineB1) shouldBe Spectrum.from(Seq(0, 97, 99, 113, 114, 128, 128, 147, 147, 163, 186, 227, 241, 242, 244, 260, 261, 262, 283, 291, 333, 340, 357, 388, 389, 390, 390, 405, 430, 430, 447, 485, 487, 503, 504, 518, 543, 544, 552, 575, 577, 584, 631, 632, 650, 651, 671, 672, 690, 691, 738, 745, 747, 770, 778, 779, 804, 818, 819, 835, 837, 875, 892, 892, 917, 932, 932, 933, 934, 965, 982, 989, 1031, 1039, 1060, 1061, 1062, 1078, 1080, 1081, 1095, 1136, 1159, 1175, 1175, 1194, 1194, 1208, 1209, 1223, 1225, 1322))
    }
  }

  feature("cyclicSpectrum") {
    scenario("example") {
      val peptide = Peptide("113 128 186")
      cyclicSpectrum(peptide) shouldBe Spectrum.from(Seq(0, 113, 128, 186, 241, 299, 314, 427))
    }
    scenario("tyrocidineB1") {
      cyclicSpectrum(peptideFrom(tyrocidineB1)) shouldBe Spectrum.from(Seq(0, 97, 99, 113, 114, 128, 128, 147, 147, 163, 186, 227, 241, 242, 244, 260, 261, 262, 283, 291, 333, 340, 357, 388, 389, 390, 390, 405, 430, 430, 447, 485, 487, 503, 504, 518, 543, 544, 552, 575, 577, 584, 631, 632, 650, 651, 671, 672, 690, 691, 738, 745, 747, 770, 778, 779, 804, 818, 819, 835, 837, 875, 892, 892, 917, 932, 932, 933, 934, 965, 982, 989, 1031, 1039, 1060, 1061, 1062, 1078, 1080, 1081, 1095, 1136, 1159, 1175, 1175, 1194, 1194, 1208, 1209, 1223, 1225, 1322))
    }
  }

  feature("cyclopeptideSequencingBranchAndBound") {
    scenario("example") {
      val spectrum = Spectrum("0 57 57 114 114 171 171 228")
      val expectedResult = Set(Peptide("114-57-57"), Peptide("57-57-114"), Peptide("57-114-57"))
      cyclopeptideSequencingBranchAndBound(spectrum) shouldBe expectedResult
    }
    scenario("interactive quiz") {
      val spectrum = Spectrum("0 71 97 99 103 113 113 114 115 131 137 196 200 202 208 214 226 227 228 240 245 299 311 311 316 327 337 339 340 341 358 408 414 424 429 436 440 442 453 455 471 507 527 537 539 542 551 554 556 566 586 622 638 640 651 653 657 664 669 679 685 735 752 753 754 756 766 777 782 782 794 848 853 865 866 867 879 885 891 893 897 956 962 978 979 980 980 990 994 996 1022 1093")
      val expectedResult = Set(
        Peptide("97-103-137-71-131-114-113-113-115-99"), Peptide("99-115-113-113-114-131-71-137-103-97"), Peptide("131-114-113-113-115-99-97-103-137-71"),
        Peptide("71-131-114-113-113-115-99-97-103-137"), Peptide("113-113-115-99-97-103-137-71-131-114"), Peptide("137-71-131-114-113-113-115-99-97-103"),
        Peptide("114-113-113-115-99-97-103-137-71-131"), Peptide("71-137-103-97-99-115-113-113-114-131"), Peptide("97-99-115-113-113-114-131-71-137-103"),
        Peptide("99-97-103-137-71-131-114-113-113-115"), Peptide("113-114-131-71-137-103-97-99-115-113"), Peptide("137-103-97-99-115-113-113-114-131-71"),
        Peptide("113-115-99-97-103-137-71-131-114-113"), Peptide("115-113-113-114-131-71-137-103-97-99"), Peptide("114-131-71-137-103-97-99-115-113-113"),
        Peptide("113-113-114-131-71-137-103-97-99-115"), Peptide("115-99-97-103-137-71-131-114-113-113"), Peptide("103-97-99-115-113-113-114-131-71-137"),
        Peptide("103-137-71-131-114-113-113-115-99-97"), Peptide("131-71-137-103-97-99-115-113-113-114")
      )
      cyclopeptideSequencingBranchAndBound(spectrum) shouldBe expectedResult
    }
  }

  feature("") {
    scenario("example") {

    }
  }

  feature("") {
    scenario("extra dataset") {

    }
  }

  feature("") {
    scenario("interactive quiz") {

    }
  }

  //  val spectrum = "0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332 333".split(" ").map(_.toInt)
  //  var peptide = "TCE"
  //  println(s"consistent(fastLinearSpectrum($peptide), $spectrum) = " + consistent(fastLinearSpectrum(peptide).map(_._2), spectrum))
  //  peptide = "CTQ"
  //  println(s"consistent(fastLinearSpectrum($peptide), $spectrum) = " + consistent(fastLinearSpectrum(peptide).map(_._2), spectrum))
  //  peptide = "ETC"
  //  println(s"consistent(fastLinearSpectrum($peptide), $spectrum) = " + consistent(fastLinearSpectrum(peptide).map(_._2), spectrum))
  //  peptide = "AQV"
  //  println(s"consistent(fastLinearSpectrum($peptide), $spectrum) = " + consistent(fastLinearSpectrum(peptide).map(_._2), spectrum))
  //  peptide = "TCQ"
  //  println(s"consistent(fastLinearSpectrum($peptide), $spectrum) = " + consistent(fastLinearSpectrum(peptide).map(_._2), spectrum))
  //  peptide = "AVQ"
  //  println(s"consistent(fastLinearSpectrum($peptide), $spectrum) = " + consistent(fastLinearSpectrum(peptide).map(_._2), spectrum))

  //  val peptide = "THSQGPWPTASIKGHMYGCGGMELLSQIAWWGSHPSGPVPVEKFK"
  //  val spectrum = "0 57 57 57 57 71 71 87 87 87 87 87 97 97 97 97 97 99 101 101 103 113 113 114 114 115 128 128 128 128 128 129 129 129 131 131 131 137 137 137 137 144 147 147 154 158 163 172 185 186 186 186 186 188 190 194 194 194 196 198 200 201 202 215 215 218 224 224 228 228 229 234 238 240 241 241 242 243 245 247 251 257 257 259 260 260 265 268 269 271 275 275 275 283 283 291 293 294 294 298 300 315 317 317 322 325 325 325 327 327 328 330 338 338 344 346 348 352 352 356 356 357 362 362 366 372 372 373 374 374 374 376 380 384 384 385 387 390 399 403 404 404 414 420 422 423 425 430 431 433 435 435 441 441 443 443 444 447 449 453 453 453 453 455 456 469 471 477 480 481 481 486 487 488 488 489 500 503 503 504 505 513 517 519 522 524 528 532 532 534 537 538 542 545 548 548 550 552 554 557 557 562 566 568 572 573 575 576 578 581 585 586 590 590 590 593 597 600 600 602 611 616 616 618 619 619 627 631 632 633 634 635 637 639 641 644 645 647 653 654 655 661 663 665 668 668 675 682 687 689 689 691 694 697 703 704 704 710 714 718 718 719 724 728 728 728 729 731 732 732 734 746 747 747 748 748 752 760 762 766 770 771 772 774 776 779 781 783 790 791 791 791 794 797 799 805 805 805 813 815 816 817 817 818 825 825 829 832 833 840 847 850 851 856 857 860 861 862 862 865 868 869 869 873 876 876 880 884 887 889 894 900 903 904 904 907 910 919 919 920 921 922 922 926 928 928 933 936 937 938 946 947 949 956 957 962 964 965 966 970 970 971 975 976 977 978 979 985 988 989 990 990 991 993 993 1001 1006 1017 1017 1018 1023 1025 1028 1031 1031 1033 1034 1035 1041 1041 1041 1046 1053 1054 1056 1062 1063 1065 1066 1071 1074 1074 1076 1077 1080 1084 1085 1090 1093 1098 1103 1104 1104 1107 1108 1112 1118 1118 1119 1121 1121 1122 1122 1125 1128 1133 1142 1143 1145 1147 1147 1148 1150 1151 1156 1159 1160 1161 1162 1164 1164 1167 1169 1175 1178 1178 1181 1190 1199 1202 1204 1205 1211 1216 1217 1219 1221 1221 1222 1224 1229 1232 1232 1234 1234 1235 1240 1241 1243 1245 1246 1246 1247 1248 1248 1250 1258 1261 1265 1270 1270 1271 1272 1276 1276 1278 1289 1290 1293 1293 1295 1303 1304 1304 1305 1306 1318 1318 1319 1321 1333 1339 1342 1342 1345 1346 1347 1350 1350 1350 1357 1361 1362 1363 1363 1363 1368 1369 1369 1371 1371 1373 1375 1379 1380 1387 1390 1391 1392 1393 1400 1402 1402 1405 1407 1407 1407 1407 1415 1415 1417 1418 1418 1426 1426 1432 1437 1448 1450 1458 1459 1464 1466 1470 1470 1470 1474 1474 1476 1476 1478 1481 1487 1493 1494 1494 1494 1497 1499 1500 1502 1504 1504 1505 1505 1507 1508 1512 1512 1518 1519 1521 1521 1527 1531 1536 1544 1545 1547 1551 1557 1561 1563 1563 1565 1565 1565 1565 1569 1584 1588 1589 1590 1591 1594 1598 1601 1601 1602 1603 1603 1604 1608 1608 1609 1617 1618 1622 1622 1628 1631 1631 1631 1632 1633 1634 1636 1644 1645 1650 1655 1655 1656 1664 1666 1667 1674 1675 1678 1678 1681 1685 1688 1690 1693 1693 1693 1694 1694 1698 1698 1699 1702 1712 1715 1718 1719 1720 1726 1734 1735 1737 1742 1745 1745 1745 1745 1747 1749 1751 1753 1759 1759 1761 1764 1765 1765 1773 1775 1776 1780 1781 1783 1791 1792 1794 1795 1795 1795 1796 1799 1802 1806 1812 1821 1822 1822 1822 1822 1830 1832 1832 1836 1840 1844 1846 1848 1850 1851 1852 1856 1857 1860 1868 1870 1873 1873 1874 1874 1878 1878 1879 1879 1892 1893 1893 1895 1896 1896 1905 1909 1909 1911 1912 1923 1930 1931 1935 1935 1937 1939 1939 1941 1944 1947 1949 1950 1950 1950 1953 1957 1958 1960 1961 1964 1967 1969 1969 1973 1975 1977 1980 1980 1983 1988 1992 1993 1993 2002 2002 2005 2007 2008 2010 2018 2018 2024 2024 2031 2032 2034 2036 2037 2037 2038 2040 2042 2050 2051 2054 2059 2064 2064 2065 2067 2070 2070 2072 2075 2080 2086 2089 2089 2094 2097 2097 2097 2097 2098 2101 2108 2111 2111 2115 2117 2117 2121 2121 2129 2133 2137 2137 2137 2138 2139 2139 2146 2151 2152 2155 2158 2162 2162 2167 2168 2169 2174 2179 2182 2184 2186 2188 2194 2195 2196 2198 2198 2198 2204 2208 2208 2210 2212 2212 2217 2218 2218 2220 2225 2225 2226 2230 2231 2233 2240 2252 2252 2255 2264 2265 2266 2266 2267 2268 2269 2271 2275 2275 2276 2283 2283 2283 2283 2295 2295 2295 2297 2299 2299 2299 2309 2311 2312 2315 2317 2321 2325 2326 2327 2332 2332 2335 2346 2348 2349 2352 2354 2356 2358 2361 2362 2363 2364 2367 2368 2377 2380 2380 2380 2380 2382 2392 2392 2394 2396 2397 2397 2398 2402 2403 2403 2408 2412 2412 2413 2415 2422 2426 2427 2436 2445 2446 2448 2449 2449 2454 2454 2460 2463 2463 2464 2467 2469 2469 2477 2483 2484 2489 2489 2490 2491 2492 2493 2493 2495 2495 2506 2510 2511 2511 2511 2512 2523 2525 2528 2535 2535 2536 2539 2540 2540 2541 2543 2546 2550 2550 2550 2550 2554 2566 2566 2566 2566 2578 2582 2582 2582 2582 2586 2589 2591 2592 2592 2593 2596 2597 2597 2604 2607 2609 2620 2621 2621 2621 2622 2626 2637 2637 2639 2639 2640 2641 2642 2643 2643 2648 2649 2655 2663 2663 2665 2668 2669 2669 2672 2678 2678 2683 2683 2684 2686 2687 2696 2705 2706 2710 2717 2719 2720 2720 2724 2729 2729 2730 2734 2735 2735 2736 2738 2740 2740 2750 2752 2752 2752 2752 2755 2764 2765 2768 2769 2770 2771 2774 2776 2778 2780 2783 2784 2786 2797 2800 2800 2805 2806 2807 2811 2815 2817 2820 2821 2823 2833 2833 2833 2835 2837 2837 2837 2849 2849 2849 2849 2856 2857 2857 2861 2863 2864 2865 2866 2866 2867 2868 2877 2880 2880 2892 2899 2901 2902 2906 2907 2907 2912 2914 2914 2915 2920 2920 2922 2924 2924 2928 2934 2934 2934 2936 2937 2938 2944 2946 2948 2950 2953 2958 2963 2964 2965 2970 2970 2974 2977 2980 2981 2986 2993 2993 2994 2995 2995 2995 2999 3003 3011 3011 3015 3015 3017 3021 3021 3024 3031 3034 3035 3035 3035 3035 3038 3043 3043 3046 3052 3057 3060 3062 3062 3065 3067 3068 3068 3073 3078 3081 3082 3090 3092 3094 3095 3095 3096 3098 3100 3101 3108 3108 3114 3114 3122 3124 3125 3127 3130 3130 3139 3139 3140 3144 3149 3152 3152 3155 3157 3159 3163 3163 3165 3168 3171 3172 3174 3175 3179 3182 3182 3182 3183 3185 3188 3191 3193 3193 3195 3197 3197 3201 3202 3209 3220 3221 3223 3223 3227 3236 3236 3237 3239 3239 3240 3253 3253 3254 3254 3258 3258 3259 3259 3262 3264 3272 3275 3276 3280 3281 3282 3284 3286 3288 3292 3296 3300 3300 3302 3310 3310 3310 3310 3311 3320 3326 3330 3333 3336 3337 3337 3337 3338 3340 3341 3349 3351 3352 3356 3357 3359 3367 3367 3368 3371 3373 3373 3379 3381 3383 3385 3387 3387 3387 3387 3390 3395 3397 3398 3406 3412 3413 3414 3417 3420 3430 3433 3434 3434 3438 3438 3439 3439 3439 3442 3444 3447 3451 3454 3454 3457 3458 3465 3466 3468 3476 3477 3477 3482 3487 3488 3496 3498 3499 3500 3501 3501 3501 3504 3510 3510 3514 3515 3523 3524 3524 3528 3529 3529 3530 3531 3531 3534 3538 3541 3542 3543 3544 3548 3563 3567 3567 3567 3567 3569 3569 3571 3575 3581 3585 3587 3588 3596 3601 3605 3611 3611 3613 3614 3620 3620 3624 3625 3627 3627 3628 3628 3630 3632 3633 3635 3638 3638 3638 3639 3645 3651 3654 3656 3656 3658 3658 3662 3662 3662 3666 3668 3673 3674 3682 3684 3695 3700 3706 3706 3714 3714 3715 3717 3717 3725 3725 3725 3725 3727 3730 3730 3732 3739 3740 3741 3742 3745 3752 3753 3757 3759 3761 3761 3763 3763 3764 3769 3769 3769 3770 3771 3775 3782 3782 3782 3785 3786 3787 3790 3790 3793 3799 3811 3813 3814 3814 3826 3827 3828 3828 3829 3837 3839 3839 3842 3843 3854 3856 3856 3860 3861 3862 3862 3867 3871 3874 3882 3884 3884 3885 3886 3886 3887 3889 3891 3892 3897 3898 3898 3900 3900 3903 3908 3910 3911 3911 3913 3915 3916 3921 3927 3928 3930 3933 3942 3951 3954 3954 3957 3963 3965 3968 3968 3970 3971 3972 3973 3976 3981 3982 3984 3985 3985 3987 3989 3990 3999 4004 4007 4010 4010 4011 4011 4013 4014 4014 4020 4024 4025 4028 4028 4029 4034 4039 4042 4047 4048 4052 4055 4056 4058 4058 4061 4066 4067 4069 4070 4076 4078 4079 4086 4091 4091 4091 4097 4098 4099 4101 4101 4104 4107 4109 4114 4115 4115 4126 4131 4139 4139 4141 4142 4142 4143 4144 4147 4153 4154 4155 4156 4157 4161 4162 4162 4166 4167 4168 4170 4175 4176 4183 4185 4186 4194 4195 4196 4199 4204 4204 4206 4210 4210 4211 4212 4213 4213 4222 4225 4228 4228 4229 4232 4238 4243 4245 4248 4252 4256 4256 4259 4263 4263 4264 4267 4270 4270 4271 4272 4275 4276 4281 4282 4285 4292 4299 4300 4303 4307 4307 4314 4315 4315 4316 4317 4319 4327 4327 4327 4333 4335 4338 4341 4341 4341 4342 4349 4351 4353 4356 4358 4360 4361 4362 4366 4370 4372 4380 4384 4384 4385 4385 4386 4398 4400 4400 4401 4403 4404 4404 4404 4408 4413 4414 4414 4418 4422 4428 4428 4429 4435 4438 4441 4443 4443 4445 4450 4457 4464 4464 4467 4469 4471 4477 4478 4479 4485 4487 4488 4491 4493 4495 4497 4498 4499 4500 4501 4505 4513 4513 4514 4516 4516 4521 4530 4532 4532 4535 4539 4542 4542 4542 4546 4547 4551 4554 4556 4557 4559 4560 4564 4566 4570 4575 4575 4578 4580 4582 4584 4584 4587 4590 4594 4595 4598 4600 4600 4604 4608 4610 4613 4615 4619 4627 4628 4629 4629 4632 4643 4644 4644 4645 4646 4651 4651 4652 4655 4661 4663 4676 4677 4679 4679 4679 4679 4683 4685 4688 4689 4689 4691 4691 4697 4697 4699 4701 4702 4707 4709 4710 4712 4718 4728 4728 4729 4733 4742 4745 4747 4748 4748 4752 4756 4758 4758 4758 4759 4760 4760 4766 4770 4770 4775 4776 4776 4780 4780 4784 4786 4788 4794 4794 4802 4804 4805 4805 4807 4807 4807 4810 4815 4815 4817 4832 4834 4838 4838 4839 4841 4849 4849 4857 4857 4857 4861 4863 4864 4867 4872 4872 4873 4875 4875 4881 4885 4887 4889 4890 4891 4891 4892 4894 4898 4903 4904 4904 4908 4908 4914 4917 4917 4930 4931 4932 4934 4936 4938 4938 4938 4942 4944 4946 4946 4946 4946 4947 4960 4969 4974 4978 4985 4985 4988 4995 4995 4995 4995 5001 5001 5001 5003 5003 5003 5004 5004 5004 5004 5004 5017 5018 5018 5019 5019 5029 5031 5031 5033 5035 5035 5035 5035 5035 5045 5045 5045 5045 5045 5061 5061 5075 5075 5075 5075 5132".split(" ").map(_.toInt)
  //  val peptide = "MAMA"
  //  val spectrum = "0 71 71 71 131 131 131 156 198 199 199 202 202 202 333 333 333 404 404".split(" ").map(_.toInt)
  //  println(s"scoreCyclic($peptide), " + spectrum.mkString(" ") + ") = " + score(cyclicSpectrum(peptideNumeric(peptide)), spectrum))
  //  val peptide ="IDLNPQVWSLLYMWQAFIFTTTIKWVHIGVCFHQPE"
  //  val spectrum = "0 57 71 71 71 87 97 97 99 99 99 101 101 103 113 113 113 113 113 113 114 115 128 128 128 128 128 128 128 129 131 137 137 147 147 156 163 168 186 186 199 199 200 200 202 204 208 211 212 214 225 226 227 227 227 228 236 241 241 242 242 243 250 260 265 265 273 275 276 284 284 285 294 296 305 307 313 313 314 315 317 324 328 336 339 339 340 342 349 351 354 355 356 357 363 364 364 372 374 385 386 389 389 407 412 412 413 418 420 431 433 438 441 443 445 452 453 454 455 460 463 464 467 470 476 477 477 480 483 485 492 492 499 500 502 510 511 514 516 520 540 546 548 554 556 563 565 565 566 567 568 576 580 582 588 590 591 593 593 597 598 605 607 608 611 613 624 627 639 639 639 645 655 659 661 662 664 678 679 681 691 691 693 694 695 696 704 704 706 708 710 710 711 718 721 726 738 752 758 758 761 762 765 767 767 774 776 792 792 792 793 793 794 806 806 807 807 808 817 819 823 824 832 834 838 839 851 863 864 867 875 877 878 889 892 893 895 904 905 905 905 918 919 920 921 921 921 935 935 937 945 952 954 966 975 978 979 979 980 986 988 992 1003 1006 1006 1008 1018 1019 1020 1023 1034 1034 1042 1046 1048 1065 1067 1067 1068 1072 1074 1078 1079 1092 1100 1107 1109 1113 1116 1116 1117 1119 1121 1122 1134 1147 1147 1147 1155 1170 1171 1171 1178 1180 1180 1181 1187 1192 1193 1206 1206 1210 1218 1226 1228 1229 1231 1234 1244 1247 1250 1269 1272 1277 1283 1284 1284 1284 1293 1294 1294 1303 1307 1315 1320 1323 1330 1334 1343 1346 1355 1355 1357 1359 1373 1381 1382 1385 1397 1397 1397 1405 1406 1412 1412 1417 1420 1426 1428 1431 1431 1433 1451 1456 1458 1474 1483 1483 1484 1486 1486 1498 1502 1510 1511 1519 1525 1529 1532 1534 1534 1544 1545 1545 1554 1559 1564 1567 1582 1585 1587 1599 1599 1611 1614 1616 1626 1630 1631 1639 1647 1657 1660 1662 1663 1666 1669 1670 1673 1681 1686 1710 1710 1712 1727 1727 1727 1733 1740 1744 1744 1745 1769 1771 1773 1786 1788 1794 1794 1797 1799 1800 1809 1826 1830 1838 1840 1840 1857 1858 1859 1870 1871 1872 1873 1880 1891 1896 1897 1901 1922 1923 1927 1928 1939 1953 1963 1971 1972 1977 1985 1985 1986 1988 1993 1994 1994 1998 2005 2024 2027 2034 2040 2051 2052 2076 2084 2090 2091 2095 2099 2101 2101 2108 2113 2122 2122 2122 2133 2139 2147 2155 2171 2189 2190 2193 2196 2204 2209 2212 2212 2214 2219 2226 2236 2248 2250 2260 2276 2290 2302 2303 2308 2309 2310 2317 2318 2321 2325 2325 2337 2340 2347 2351 2361 2404 2416 2418 2423 2424 2431 2436 2437 2438 2439 2452 2453 2462 2464 2465 2503 2507 2533 2544 2550 2551 2551 2552 2553 2561 2565 2567 2578 2590 2602 2604 2631 2632 2638 2649 2664 2666 2666 2679 2689 2689 2689 2691 2715 2730 2735 2760 2763 2778 2779 2786 2788 2792 2794 2801 2817 2817 2828 2843 2857 2891 2898 2900 2907 2907 2914 2914 2915 2916 2916 2956 2964 2971 3006 3011 3013 3020 3027 3028 3028 3043 3044 3063 3099 3101 3114 3119 3124 3127 3141 3143 3156 3191 3200 3211 3214 3229 3255 3255 3256 3271 3288 3300 3327 3328 3328 3370 3383 3384 3397 3399 3402 3425 3456 3483 3496 3498 3527 3530 3539 3553 3611 3624 3624 3645 3667 3667 3721 3738 3758 3782 3795 3835 3866 3895 3910 3963 3981 4023 4078 4094 4191".split(" ").map(_.toInt)
  //  println(s"scoreLinear($peptide), " + spectrum.mkString(" ") + ") = " + score(linearSpectrum(peptideNumeric(peptide)), spectrum))

  //  val spectrum = "0 71 113 129 147 200 218 260 313 331 347 389 460".split(" ").map(_.toInt)
  //  val n = 10
  //  val spectrum = "0 71 71 71 87 97 97 99 101 103 113 113 114 115 128 128 129 137 147 163 163 170 184 184 186 186 190 211 215 226 226 229 231 238 241 244 246 257 257 276 277 278 299 300 312 316 317 318 318 323 328 340 343 344 347 349 356 366 370 373 374 391 401 414 414 415 419 427 427 431 437 441 446 453 462 462 462 470 472 502 503 503 511 515 529 530 533 533 540 543 547 556 559 569 574 575 584 590 600 600 604 612 616 617 630 640 640 643 646 648 660 671 683 684 687 693 703 703 719 719 719 729 730 731 737 740 741 745 747 754 774 780 784 790 797 800 806 818 826 827 832 833 838 846 846 847 850 868 869 877 884 889 893 897 903 908 913 917 930 940 947 956 960 960 961 964 965 966 983 983 985 1002 1009 1010 1011 1021 1031 1031 1036 1053 1054 1058 1059 1062 1063 1074 1076 1084 1092 1103 1113 1122 1124 1130 1133 1134 1145 1146 1146 1149 1150 1155 1156 1171 1173 1174 1187 1191 1193 1200 1212 1221 1233 1240 1242 1246 1259 1260 1262 1277 1278 1283 1284 1287 1287 1288 1299 1300 1303 1309 1311 1320 1330 1341 1349 1357 1359 1370 1371 1374 1375 1379 1380 1397 1402 1402 1412 1422 1423 1424 1431 1448 1450 1450 1467 1468 1469 1472 1473 1473 1477 1486 1493 1503 1516 1520 1525 1530 1536 1540 1544 1549 1556 1564 1565 1583 1586 1587 1587 1595 1600 1601 1606 1607 1615 1627 1633 1636 1643 1649 1653 1659 1679 1686 1688 1692 1693 1696 1702 1703 1704 1714 1714 1714 1730 1730 1740 1746 1749 1750 1762 1773 1785 1787 1790 1793 1793 1803 1816 1817 1821 1829 1833 1833 1843 1849 1858 1859 1864 1877 1886 1890 1893 1900 1900 1903 1904 1918 1922 1930 1930 1931 1961 1963 1971 1971 1971 1980 1987 1992 1996 2002 2006 2006 2014 2018 2019 2019 2032 2042 2059 2060 2063 2067 2077 2084 2086 2089 2090 2093 2105 2110 2115 2115 2116 2117 2121 2133 2134 2155 2156 2157 2176 2176 2187 2189 2192 2195 2202 2204 2207 2207 2218 2222 2243 2247 2247 2249 2249 2263 2270 2270 2286 2296 2304 2305 2305 2318 2319 2320 2320 2330 2332 2334 2336 2336 2346 2362 2362 2362 2433".split(" ").map(_.toInt)
  //  val n = 325
  //  val spectrum = "0 71 87 87 97 97 97 99 101 113 113 113 113 114 114 115 115 115 128 128 128 128 129 131 168 184 186 194 196 200 202 211 212 212 214 216 228 228 229 242 242 242 242 243 244 256 259 273 281 282 293 299 299 301 309 309 313 315 315 329 339 341 342 356 357 370 371 372 373 373 388 395 396 396 402 406 408 410 410 412 412 428 429 430 441 453 460 470 472 484 486 495 499 501 501 507 509 509 510 515 516 517 521 523 524 527 538 543 557 569 581 585 588 596 608 608 614 614 615 615 622 623 624 630 635 637 638 640 644 645 646 652 658 666 684 702 709 710 711 711 712 721 723 728 737 743 745 750 751 752 758 761 763 765 771 773 774 781 783 808 808 822 825 825 830 836 836 837 838 857 858 865 874 878 878 880 886 888 889 889 896 896 905 907 922 937 944 949 950 952 953 954 957 965 967 987 987 993 993 1003 1004 1009 1011 1016 1017 1017 1019 1020 1025 1041 1050 1050 1054 1064 1065 1067 1078 1080 1080 1086 1100 1112 1117 1118 1118 1121 1124 1124 1130 1131 1131 1138 1145 1147 1151 1164 1178 1179 1183 1193 1193 1195 1199 1211 1218 1225 1227 1231 1231 1237 1245 1246 1246 1249 1253 1259 1259 1261 1266 1266 1280 1292 1296 1298 1306 1308 1324 1326 1330 1332 1340 1342 1346 1353 1359 1359 1360 1360 1366 1373 1377 1379 1387 1389 1393 1395 1411 1413 1421 1423 1427 1439 1453 1453 1458 1460 1460 1466 1470 1473 1473 1474 1482 1488 1488 1492 1494 1501 1508 1520 1524 1526 1526 1536 1540 1541 1555 1568 1572 1574 1581 1588 1588 1589 1595 1595 1598 1601 1601 1602 1607 1619 1633 1639 1639 1641 1652 1654 1655 1665 1669 1669 1678 1694 1699 1700 1702 1702 1703 1708 1710 1715 1716 1726 1726 1732 1732 1752 1754 1762 1765 1766 1767 1769 1770 1775 1782 1797 1812 1814 1823 1823 1830 1830 1831 1833 1839 1841 1841 1845 1849 1854 1861 1862 1881 1882 1883 1883 1889 1894 1894 1897 1911 1911 1936 1938 1945 1946 1948 1954 1956 1958 1961 1967 1968 1969 1974 1976 1982 1991 1996 1998 2007 2008 2008 2009 2010 2017 2035 2053 2061 2067 2073 2074 2075 2079 2081 2082 2084 2089 2095 2096 2097 2104 2104 2105 2105 2111 2111 2123 2131 2134 2138 2150 2162 2176 2181 2192 2195 2196 2198 2202 2203 2204 2209 2210 2210 2212 2218 2218 2220 2224 2233 2235 2247 2249 2259 2266 2278 2289 2290 2291 2307 2307 2309 2309 2311 2313 2317 2323 2323 2324 2331 2346 2346 2347 2348 2349 2362 2363 2377 2378 2380 2390 2404 2404 2406 2410 2410 2418 2420 2420 2426 2437 2438 2446 2460 2463 2475 2476 2477 2477 2477 2477 2490 2491 2491 2503 2505 2507 2507 2508 2517 2519 2523 2525 2533 2535 2551 2588 2590 2591 2591 2591 2591 2604 2604 2604 2605 2605 2606 2606 2606 2606 2618 2620 2622 2622 2622 2632 2632 2648 2719".split(" ").map(_.toInt)
  //  val n = 378
  //  val spectrum = "0 97 99 114 128 147 147 163 186 227 241 242 244 260 261 262 283 291 333 340 357 385 389 390 390 405 430 430 447 485 487 503 504 518 543 544 552 575 577 584 632 650 651 671 672 690 691 738 745 747 770 778 779 804 818 819 820 835 837 875 892 917 932 932 933 934 965 982 989 1030 1039 1060 1061 1062 1078 1080 1081 1095 1136 1159 1175 1175 1194 1194 1208 1209 1223 1225 1322".split(" ").map(_.toInt)
  //  val spectrum = "0 97 99 113 114 115 128 128 147 147 163 186 227 241 242 244 244 256 260 261 262 283 291 309 330 333 340 347 385 388 389 390 390 405 435 447 485 487 503 504 518 544 552 575 577 584 599 608 631 632 650 651 653 672 690 691 717 738 745 770 779 804 818 819 827 835 837 875 892 892 917 932 932 933 934 965 982 989 1039 1060 1062 1078 1080 1081 1095 1136 1159 1175 1175 1194 1194 1208 1209 1223 1322".split(" ").map(_.toInt)
  //  val n = 1000
  //  println(s"cyclopeptideSequencingLeaederboard({" + spectrum.mkString(",") + "}) = " + cyclopeptideSequencingLeaderboard(spectrum,n).mkString("-"))

  ////  val spectrum = "0 113 114 128 129 227 242 242 257 355 356 370 371 484".split(" ").map(_.toInt)
  ////  val spectrum = "0 99 113 114 128 227 257 299 355 356 370 371 484".split(" ").map(_.toInt)
  ////  val spectrum = "131 457 931 832 572 946 331 131 844 215 588 344 372 200 0 960 600 230 244 113 444 359 129 257 715 471 340 574 930 471 487 241 702 946 829 244 260 602 671 928 459 802 328 799 815 584 572 113 99 487 731 687 859 815 615 475 928 700 588 128 1059 358 388 485 931 972 357 701 87 818 728 227 128 719".split(" ").map(_.toInt)
  //  val spectrum = "0 86 160 234 308 320 382".split(" ").map(_.toInt)
  //  //val r: Map[Int, Int] = spectralConvolution(spectrum).groupBy(k => k).map(kv => (kv._1, kv._2.length))
  ////  println(s"spectralConvolution($spectrum) = " + spectralConvolution(spectrum).mkString(" "))
  //  println(s"spectralConvolution($spectrum) = " + spectralConvolution(spectrum).groupBy(k => k).map(kv => (kv._1,kv._2.length)).mkString(" "))

  //  val m = 20
  //  val n = 60
  //  val spectrum = "0 57 57 71 99 129 137 170 186 194 208 228 265 285 299 307 323 356 364 394 422 493".split(" ").map(_.toInt)
  //  val m = 18
  //  val n = 391
  //  val spectrum = "1343 329 1224 1186 227 1462 866 847 516 1357 1531 763 1428 216 698 543 1103 1256 288 666 1370 1545 1077 569 1001 1267 545 877 893 970 297 640 1067 1111 216 746 1419 970 224 1306 698 444 1430 201 113 1130 1533 732 1088 996 377 373 780 796 535 914 667 753 97 1327 1483 103 537 456 113 303 1321 1206 434 1408 101 1543 1190 1132 730 893 1317 0 850 289 226 331 561 883 1531 948 1549 319 403 101 629 1109 210 379 799 1057 1559 1358 1559 813 1273 1532 440 216 1349 1559 466 676 321 1093 1219 115 163 682 314 422 432 504 401 115 264 390 914 1269 732 980 650 114 1444 948 558 617 325 1430 833 474 1243 916 979 813 1430 340 1422 645 514 617 1382 1472 1116 1154 1017 866 137 659 238 174 676 753 597 1049 530 1029 460 1332 1646 1006 1101 1325 443 1315 1180 1436 276 353 763 1172 87 1293 883 87 1142 184 202 1509 833 1212 990 579 1420 1245 87 769 1202 553 656 589 987 492 1085 1533 113 1445 1029 1203 1214 964 218 427 780 1533 1545 900".split(" ").map(_.toInt).sorted
  //  println(s"cyclopeptideSequencingConvolution($m,$n,{" + spectrum.mkString(",") + "}) = " + cyclopeptideSequencingConvolution(m, n, spectrum).mkString("-"))

}
